class e{symbol;constructor(e){this.symbol=e}get symbol(){return this.symbol}}const t=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];class r{board;constructor(e=null){this.board=e??this.getBlank()}get board(){return this.board}makeMove(e,t){this.abortInvalidMove(t),this.board[t]=e.symbol}undoMove(e,t){this.board[t]===e.symbol&&(this.board[t]=null)}getWinner(){let e=null;for(let r=0,s=t.length;r<s;r++){let s=t[r];if(null!==this.board[s[0]]&&this.board[s[0]]===this.board[s[1]]&&this.board[s[0]]===this.board[s[2]]){if(null!==e&&e!==this.board[s[0]])throw new Error("The current state is rigged, there cannot be more than one winner.");e=this.board[s[0]]}}return e}abortInvalidMove(e){if(!this.isIndexWithinRange(e))throw new Error("Index is not between 0 and 8.");if(!this.isIndexAvailable(e))throw new Error("This field is already taken.")}isIndexAvailable(e){return!!this.isIndexWithinRange(e)&&null===this.board[e]}isIndexWithinRange(e){return 0<=e&&e<=8}getBlank(){let e=[];for(let t=0,r=9;t<r;t++)e[t]=null;return e}getPossibleMoves(){let e=[];for(let t=0,r=9;t<r;t++)null===this.board[t]&&e.push(t);return e}isGameOver(){return!this.board.includes(null)||null!==this.getWinner()}}class s extends e{opponent;constructor(e,t){super(t),this.opponent=e}getMove(e){if(e.isGameOver())return null;let t=e.getPossibleMoves(),r=[];for(let s=0,i=t.length;s<i;s++){let i=t[s];e.makeMove(this,i),r.push(this.minimax(this.opponent,e)),e.undoMove(this,i)}let s=Math.max(...r),i=[];for(let e=0,n=r.length;e<n;e++)s===r[e]&&i.push(t[e]);return 1<i.length?i[Math.floor(Math.random()*i.length)]:i[0]}minimax(e,t,r=0){if(t.isGameOver())return this.getScore(e,t,r);let s=this.isMaximizingPlayer(e),i=s?-1/0:1/0,n=t.getPossibleMoves();for(let o=0,a=n.length;o<a;o++){let a=n[o];t.makeMove(e,a);let l=this.minimax(this.getOppositePlayer(e),t,r+1);t.undoMove(e,a),i=s?Math.max(l,i):Math.min(l,i)}return i}getScore(e,t,r){switch(t.getWinner()){case this.opponent.symbol:return-10+r;case this.symbol:return 10-r;default:return 0}}getOppositePlayer(e){return this.isMaximizingPlayer(e)?this.opponent:this}isMaximizingPlayer(e){return this.symbol===e.symbol}}const i="game-restart",n="game-overlay",o="game-message",a="game-error",l="game-board",h="invisible",u="visible",m="success",d="failure",c={win:"You've won!",loose:"You've lost!",tie:"It's a tie!"};class g{restart;overlay;message;error;board;current_player;winner;computer;human;state;constructor(){if(this.overlay=document.getElementById(n),this.restart=document.getElementById(i),this.message=document.getElementById(o),this.error=document.getElementById(a),this.board=document.getElementById(l),null===this.error||null===this.restart||null===this.board||null===this.overlay||null===this.message)throw new Error("Could not retrieve all necessary elements from DOM.");this.current_player=new e("cross"),this.computer=new s(this.current_player,"circle"),this.human=this.current_player,this.state=new r,this.winner=null}setupDOM(){this.restart.addEventListener("click",(()=>{this.restartHook()})),this.board.addEventListener("click",(e=>{this.delegateHook(e)})),this.restart.disabled=!0,this.resetOverlay(),this.resetError();for(let e=0,t=9;e<t;e++){let t=document.createElement("li");t.id=e.toString(),this.board.append(t)}}delegateHook(e){e.target.matches("li")&&this.boardHook(parseInt(e.target.id))}boardHook(e){if(!this.state.isGameOver()&&this.state.isIndexAvailable(e)&&(this.restart.disabled=!1,this.processMove(this.current_player,e),!this.state.isGameOver())){let e=this.computer.getMove(new r([...this.state.board]));null!==e&&this.processMove(this.computer,e)}}processMove(e,t){try{this.state.makeMove(e,t),this.winner=this.getWinner()}catch(e){return void this.showError(e.message)}document.getElementById(t.toString()).className=e.symbol,this.state.isGameOver()&&this.showOverlayByState(),this.toggleCurrentPlayer()}restartHook(){let e=this.board.getElementsByTagName("li");for(let t=0,r=e.length;t<r;t++)e[t].className="";this.restart.disabled=!0,this.current_player=this.human,this.state=new r,this.winner=null,this.resetOverlay(),this.resetError()}toggleCurrentPlayer(){this.current_player.symbol===this.human.symbol?this.current_player=this.computer:this.current_player=this.human}getWinner(){switch(this.state.getWinner()){case this.computer.symbol:return this.computer;case this.human.symbol:return this.human;default:return null}}showOverlayByState(){null!==this.winner?(this.winner.symbol===this.computer.symbol&&this.showOverlay(c.loose,d),this.winner.symbol===this.human.symbol&&this.showOverlay(c.win,m)):this.showOverlay(c.tie)}showOverlay(e,t=null){this.message.innerHTML=e,this.overlay.className=null!==t?`${u} ${t}`:`${u}`}resetOverlay(){this.overlay.className=h,this.message.innerHTML=""}showError(e){this.error.className=`${d} ${u}`,this.error.innerHTML=e,setTimeout(this.resetError,2e3)}resetError(){this.error.className=h,this.error.innerHTML=""}}window.onload=function(){(new g).setupDOM()};
